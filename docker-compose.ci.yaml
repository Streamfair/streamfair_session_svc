version: "3.9"
services:
  db:
    image: postgres:16-alpine
    container_name: streamfair_session_service_db
    environment:
      CONTAINER_ENV:     true
      POSTGRES_DB:       ${POSTGRES_DB}
      POSTGRES_USER:     ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5435:5432"
    networks:
      - db_access_network
    healthcheck:
      test:         [ "CMD", "/usr/local/bin/pg_isready", "-h", "db" ]
      start_period: 1s
      interval:     1s
      timeout:      1s
      retries:      30

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: streamfair_session_service
    environment:
      CONTAINER_ENV:                       true
      CI:                                  true
      DB_SOURCE_SESSION_SERVICE:           ${DB_SOURCE_SESSION_SERVICE}
      MIGRATION_URL:                       ${MIGRATION_URL}
      HTTP_SERVER_ADDRESS_SESSION_SERVICE: ${HTTP_SERVER_ADDRESS_SESSION_SERVICE}
      GRPC_SERVER_ADDRESS_SESSION_SERVICE: ${GRPC_SERVER_ADDRESS_SESSION_SERVICE}
      TOKEN_SYMMETRIC_KEY:                 ${TOKEN_SYMMETRIC_KEY}
      ACCESS_TOKEN_DURATION:               ${ACCESS_TOKEN_DURATION}
      REFRESH_TOKEN_DURATION:              ${REFRESH_TOKEN_DURATION}
      SERVER_NAME:                         ${SERVER_NAME}
      CERT_PEM:                            ${CERT_PEM}
      KEY_PEM:                             ${KEY_PEM}
      CA_CERT_PEM:                         ${CA_CERT_PEM}
    ports:
      - "9490:9093"
      - "8480:8083"
    networks:
      - streamfair_internal_network
      - db_access_network
    depends_on:
      db:
        condition: service_healthy
    entrypoint: [ "/streamfair_session_svc/sh/wait-for.sh", "db:5432", "--", "/streamfair_session_svc/sh/start.sh" ]
    command: [ "/streamfair_session_svc/session_svc" ]
    healthcheck:
      test: ["CMD", "curl", "--fail", "-s", "-k", "https://streamfair_session_service_db:8083/streamfair/v1/healthz"]
      interval:     1s
      timeout:      1s
      retries:      30
      start_period: 5s

  # a dummy service which blocks "docker compose up -d" from returning until all services are up & healthy
  app-healthy:
    image: alpine:latest
    container_name: service_status
    command: [ "echo", "all services are up & healthy" ]
    depends_on:
      api:
        condition: service_healthy
        
networks:
  db_access_network:
    driver: bridge
  streamfair_internal_network:
    driver: bridge