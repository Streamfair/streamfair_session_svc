// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: session.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO "session_svc"."Sessions" (
 uuid,
 username,
 refresh_token,
 user_agent,
 client_ip,
 is_blocked,
 expires_at
) VALUES (
 $1, $2, $3, $4, $5, $6, $7
)
RETURNING uuid, username, refresh_token, user_agent, client_ip, is_blocked, expires_at, created_at
`

type CreateSessionParams struct {
	Uuid         uuid.UUID `json:"uuid"`
	Username     string    `json:"username"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	ClientIp     string    `json:"client_ip"`
	IsBlocked    bool      `json:"is_blocked"`
	ExpiresAt    time.Time `json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (SessionSvcSession, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.Uuid,
		arg.Username,
		arg.RefreshToken,
		arg.UserAgent,
		arg.ClientIp,
		arg.IsBlocked,
		arg.ExpiresAt,
	)
	var i SessionSvcSession
	err := row.Scan(
		&i.Uuid,
		&i.Username,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM "session_svc"."Sessions" WHERE uuid = $1
`

func (q *Queries) DeleteSession(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSession, argUuid)
	return err
}

const extendSession = `-- name: ExtendSession :one
UPDATE "session_svc"."Sessions" SET expires_at = $2 WHERE uuid = $1 RETURNING uuid, username, refresh_token, user_agent, client_ip, is_blocked, expires_at, created_at
`

type ExtendSessionParams struct {
	Uuid      uuid.UUID `json:"uuid"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) ExtendSession(ctx context.Context, arg ExtendSessionParams) (SessionSvcSession, error) {
	row := q.db.QueryRow(ctx, extendSession, arg.Uuid, arg.ExpiresAt)
	var i SessionSvcSession
	err := row.Scan(
		&i.Uuid,
		&i.Username,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getSession = `-- name: GetSession :one
SELECT uuid, username, refresh_token, user_agent, client_ip, is_blocked, expires_at, created_at FROM "session_svc"."Sessions"
WHERE uuid = $1 LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, argUuid uuid.UUID) (SessionSvcSession, error) {
	row := q.db.QueryRow(ctx, getSession, argUuid)
	var i SessionSvcSession
	err := row.Scan(
		&i.Uuid,
		&i.Username,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const revokeSession = `-- name: RevokeSession :exec
UPDATE "session_svc"."Sessions" SET is_blocked = true WHERE uuid = $1
`

func (q *Queries) RevokeSession(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.db.Exec(ctx, revokeSession, argUuid)
	return err
}
