// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: idp_svc.proto

package pb

import (
	context "context"
	session "github.com/Streamfair/streamfair_session_svc/pb/session"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IdentityProvider_CreateSession_FullMethodName     = "/pb.IdentityProvider/CreateSession"
	IdentityProvider_ExtendSession_FullMethodName     = "/pb.IdentityProvider/ExtendSession"
	IdentityProvider_GetSession_FullMethodName        = "/pb.IdentityProvider/GetSession"
	IdentityProvider_InvalidateSession_FullMethodName = "/pb.IdentityProvider/InvalidateSession"
	IdentityProvider_VerifySession_FullMethodName     = "/pb.IdentityProvider/VerifySession"
)

// IdentityProviderClient is the client API for IdentityProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdentityProviderClient interface {
	// Sessions
	CreateSession(ctx context.Context, in *session.CreateSessionRequest, opts ...grpc.CallOption) (*session.CreateSessionResponse, error)
	ExtendSession(ctx context.Context, in *session.ExtendSessionRequest, opts ...grpc.CallOption) (*session.ExtendSessionResponse, error)
	GetSession(ctx context.Context, in *session.GetSessionRequest, opts ...grpc.CallOption) (*session.GetSessionResponse, error)
	InvalidateSession(ctx context.Context, in *session.InvalidateSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VerifySession(ctx context.Context, in *session.VerifySessionRequest, opts ...grpc.CallOption) (*session.VerifySessionResponse, error)
}

type identityProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentityProviderClient(cc grpc.ClientConnInterface) IdentityProviderClient {
	return &identityProviderClient{cc}
}

func (c *identityProviderClient) CreateSession(ctx context.Context, in *session.CreateSessionRequest, opts ...grpc.CallOption) (*session.CreateSessionResponse, error) {
	out := new(session.CreateSessionResponse)
	err := c.cc.Invoke(ctx, IdentityProvider_CreateSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityProviderClient) ExtendSession(ctx context.Context, in *session.ExtendSessionRequest, opts ...grpc.CallOption) (*session.ExtendSessionResponse, error) {
	out := new(session.ExtendSessionResponse)
	err := c.cc.Invoke(ctx, IdentityProvider_ExtendSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityProviderClient) GetSession(ctx context.Context, in *session.GetSessionRequest, opts ...grpc.CallOption) (*session.GetSessionResponse, error) {
	out := new(session.GetSessionResponse)
	err := c.cc.Invoke(ctx, IdentityProvider_GetSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityProviderClient) InvalidateSession(ctx context.Context, in *session.InvalidateSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, IdentityProvider_InvalidateSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityProviderClient) VerifySession(ctx context.Context, in *session.VerifySessionRequest, opts ...grpc.CallOption) (*session.VerifySessionResponse, error) {
	out := new(session.VerifySessionResponse)
	err := c.cc.Invoke(ctx, IdentityProvider_VerifySession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentityProviderServer is the server API for IdentityProvider service.
// All implementations must embed UnimplementedIdentityProviderServer
// for forward compatibility
type IdentityProviderServer interface {
	// Sessions
	CreateSession(context.Context, *session.CreateSessionRequest) (*session.CreateSessionResponse, error)
	ExtendSession(context.Context, *session.ExtendSessionRequest) (*session.ExtendSessionResponse, error)
	GetSession(context.Context, *session.GetSessionRequest) (*session.GetSessionResponse, error)
	InvalidateSession(context.Context, *session.InvalidateSessionRequest) (*emptypb.Empty, error)
	VerifySession(context.Context, *session.VerifySessionRequest) (*session.VerifySessionResponse, error)
	mustEmbedUnimplementedIdentityProviderServer()
}

// UnimplementedIdentityProviderServer must be embedded to have forward compatible implementations.
type UnimplementedIdentityProviderServer struct {
}

func (UnimplementedIdentityProviderServer) CreateSession(context.Context, *session.CreateSessionRequest) (*session.CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedIdentityProviderServer) ExtendSession(context.Context, *session.ExtendSessionRequest) (*session.ExtendSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtendSession not implemented")
}
func (UnimplementedIdentityProviderServer) GetSession(context.Context, *session.GetSessionRequest) (*session.GetSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedIdentityProviderServer) InvalidateSession(context.Context, *session.InvalidateSessionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateSession not implemented")
}
func (UnimplementedIdentityProviderServer) VerifySession(context.Context, *session.VerifySessionRequest) (*session.VerifySessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySession not implemented")
}
func (UnimplementedIdentityProviderServer) mustEmbedUnimplementedIdentityProviderServer() {}

// UnsafeIdentityProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdentityProviderServer will
// result in compilation errors.
type UnsafeIdentityProviderServer interface {
	mustEmbedUnimplementedIdentityProviderServer()
}

func RegisterIdentityProviderServer(s grpc.ServiceRegistrar, srv IdentityProviderServer) {
	s.RegisterService(&IdentityProvider_ServiceDesc, srv)
}

func _IdentityProvider_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(session.CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityProviderServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityProvider_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityProviderServer).CreateSession(ctx, req.(*session.CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityProvider_ExtendSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(session.ExtendSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityProviderServer).ExtendSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityProvider_ExtendSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityProviderServer).ExtendSession(ctx, req.(*session.ExtendSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityProvider_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(session.GetSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityProviderServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityProvider_GetSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityProviderServer).GetSession(ctx, req.(*session.GetSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityProvider_InvalidateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(session.InvalidateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityProviderServer).InvalidateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityProvider_InvalidateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityProviderServer).InvalidateSession(ctx, req.(*session.InvalidateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityProvider_VerifySession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(session.VerifySessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityProviderServer).VerifySession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityProvider_VerifySession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityProviderServer).VerifySession(ctx, req.(*session.VerifySessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IdentityProvider_ServiceDesc is the grpc.ServiceDesc for IdentityProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdentityProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.IdentityProvider",
	HandlerType: (*IdentityProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _IdentityProvider_CreateSession_Handler,
		},
		{
			MethodName: "ExtendSession",
			Handler:    _IdentityProvider_ExtendSession_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _IdentityProvider_GetSession_Handler,
		},
		{
			MethodName: "InvalidateSession",
			Handler:    _IdentityProvider_InvalidateSession_Handler,
		},
		{
			MethodName: "VerifySession",
			Handler:    _IdentityProvider_VerifySession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idp_svc.proto",
}
