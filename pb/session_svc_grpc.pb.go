// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	session "github.com/Streamfair/streamfair_session_svc/pb/session"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SessionManagementServiceClient is the client API for SessionManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SessionManagementServiceClient interface {
	// Sessions
	CreateSession(ctx context.Context, in *session.CreateSessionRequest, opts ...grpc.CallOption) (*session.CreateSessionResponse, error)
	ExtendSession(ctx context.Context, in *session.ExtendSessionRequest, opts ...grpc.CallOption) (*session.ExtendSessionResponse, error)
	GetSession(ctx context.Context, in *session.GetSessionRequest, opts ...grpc.CallOption) (*session.GetSessionResponse, error)
	InvalidateSession(ctx context.Context, in *session.InvalidateSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VerifySession(ctx context.Context, in *session.VerifySessionRequest, opts ...grpc.CallOption) (*session.VerifySessionResponse, error)
}

type sessionManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionManagementServiceClient(cc grpc.ClientConnInterface) SessionManagementServiceClient {
	return &sessionManagementServiceClient{cc}
}

func (c *sessionManagementServiceClient) CreateSession(ctx context.Context, in *session.CreateSessionRequest, opts ...grpc.CallOption) (*session.CreateSessionResponse, error) {
	out := new(session.CreateSessionResponse)
	err := c.cc.Invoke(ctx, "/pb.SessionManagementService/CreateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionManagementServiceClient) ExtendSession(ctx context.Context, in *session.ExtendSessionRequest, opts ...grpc.CallOption) (*session.ExtendSessionResponse, error) {
	out := new(session.ExtendSessionResponse)
	err := c.cc.Invoke(ctx, "/pb.SessionManagementService/ExtendSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionManagementServiceClient) GetSession(ctx context.Context, in *session.GetSessionRequest, opts ...grpc.CallOption) (*session.GetSessionResponse, error) {
	out := new(session.GetSessionResponse)
	err := c.cc.Invoke(ctx, "/pb.SessionManagementService/GetSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionManagementServiceClient) InvalidateSession(ctx context.Context, in *session.InvalidateSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.SessionManagementService/InvalidateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionManagementServiceClient) VerifySession(ctx context.Context, in *session.VerifySessionRequest, opts ...grpc.CallOption) (*session.VerifySessionResponse, error) {
	out := new(session.VerifySessionResponse)
	err := c.cc.Invoke(ctx, "/pb.SessionManagementService/VerifySession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionManagementServiceServer is the server API for SessionManagementService service.
// All implementations must embed UnimplementedSessionManagementServiceServer
// for forward compatibility
type SessionManagementServiceServer interface {
	// Sessions
	CreateSession(context.Context, *session.CreateSessionRequest) (*session.CreateSessionResponse, error)
	ExtendSession(context.Context, *session.ExtendSessionRequest) (*session.ExtendSessionResponse, error)
	GetSession(context.Context, *session.GetSessionRequest) (*session.GetSessionResponse, error)
	InvalidateSession(context.Context, *session.InvalidateSessionRequest) (*emptypb.Empty, error)
	VerifySession(context.Context, *session.VerifySessionRequest) (*session.VerifySessionResponse, error)
	mustEmbedUnimplementedSessionManagementServiceServer()
}

// UnimplementedSessionManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSessionManagementServiceServer struct {
}

func (UnimplementedSessionManagementServiceServer) CreateSession(context.Context, *session.CreateSessionRequest) (*session.CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedSessionManagementServiceServer) ExtendSession(context.Context, *session.ExtendSessionRequest) (*session.ExtendSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtendSession not implemented")
}
func (UnimplementedSessionManagementServiceServer) GetSession(context.Context, *session.GetSessionRequest) (*session.GetSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedSessionManagementServiceServer) InvalidateSession(context.Context, *session.InvalidateSessionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateSession not implemented")
}
func (UnimplementedSessionManagementServiceServer) VerifySession(context.Context, *session.VerifySessionRequest) (*session.VerifySessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySession not implemented")
}
func (UnimplementedSessionManagementServiceServer) mustEmbedUnimplementedSessionManagementServiceServer() {
}

// UnsafeSessionManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionManagementServiceServer will
// result in compilation errors.
type UnsafeSessionManagementServiceServer interface {
	mustEmbedUnimplementedSessionManagementServiceServer()
}

func RegisterSessionManagementServiceServer(s grpc.ServiceRegistrar, srv SessionManagementServiceServer) {
	s.RegisterService(&SessionManagementService_ServiceDesc, srv)
}

func _SessionManagementService_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(session.CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionManagementServiceServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SessionManagementService/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionManagementServiceServer).CreateSession(ctx, req.(*session.CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionManagementService_ExtendSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(session.ExtendSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionManagementServiceServer).ExtendSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SessionManagementService/ExtendSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionManagementServiceServer).ExtendSession(ctx, req.(*session.ExtendSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionManagementService_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(session.GetSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionManagementServiceServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SessionManagementService/GetSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionManagementServiceServer).GetSession(ctx, req.(*session.GetSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionManagementService_InvalidateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(session.InvalidateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionManagementServiceServer).InvalidateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SessionManagementService/InvalidateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionManagementServiceServer).InvalidateSession(ctx, req.(*session.InvalidateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionManagementService_VerifySession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(session.VerifySessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionManagementServiceServer).VerifySession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SessionManagementService/VerifySession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionManagementServiceServer).VerifySession(ctx, req.(*session.VerifySessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SessionManagementService_ServiceDesc is the grpc.ServiceDesc for SessionManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SessionManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SessionManagementService",
	HandlerType: (*SessionManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _SessionManagementService_CreateSession_Handler,
		},
		{
			MethodName: "ExtendSession",
			Handler:    _SessionManagementService_ExtendSession_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _SessionManagementService_GetSession_Handler,
		},
		{
			MethodName: "InvalidateSession",
			Handler:    _SessionManagementService_InvalidateSession_Handler,
		},
		{
			MethodName: "VerifySession",
			Handler:    _SessionManagementService_VerifySession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "session_svc.proto",
}
